#include <iostream>
#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>
#include "Quark/Models/RecursiveFeedForwardModel.h"
#include "Quark/Layers/AdalineLayer.h"
#include "Quark/Functions/Sigmoid.h"
#include "Quark/Layers/GradientLayer.h"

using namespace Quark;

TEST_CASE("Basic example")
{
    Models::Model::Samples samples = {{ 0.9, 0.1, 0.9 }};
    Models::Model::Labels labels = {{ 0.1, 0.9, 0.9 }};
    std::vector<double> expectedPrediction = {0.49, 0.58, 0.564};
    std::vector<std::vector<double>> layer1w = {{0, 0.1, 0.15, 0.05}, {0, 0.12, 0.18, 0.08}};
    std::vector<std::vector<double>> layer2w = {{0, 0.1, 0.14},{0, 0.125, 0.21}, {0, 0.13, 0.07}};

    Quark::Models::RecursiveFeedForwardModel model {};
    model.AddLayer(std::make_unique<Quark::Layers::AdalineLayer>(2, 3, 1, std::make_shared<Functions::Sigmoid>(1), layer1w));
    model.AddLayer(std::make_unique<Quark::Layers::AdalineLayer>(3, 2, 1, std::make_shared<Functions::Sigmoid>(1), layer2w));

    model.Fit(samples, labels, {1, 0.001});

    auto prediction = model.Predict({ 0.9, 0.1, 0.9 });
    for(int i = 0; i < prediction.size(); i++)
    {
        REQUIRE_THAT(round(prediction[i] * 1000) / 1000, Catch::Matchers::WithinRel(expectedPrediction[i], 0.001));
    }
}

TEST_CASE("XOR example")
{
    Models::Model::Samples samples = {{ 0, 0 }, {0, 1}, {1, 0}, {1, 1}};
    Models::Model::Labels labels = {{ 0 }, { 1 }, { 1 }, { 0 }};

    Quark::Models::RecursiveFeedForwardModel model {};
    model.AddLayer(std::make_unique<Quark::Layers::GradientLayer>(2, 2, 0.8, std::make_shared<Functions::Sigmoid>(1), true));
    model.AddLayer(std::make_unique<Quark::Layers::GradientLayer>(1, 2, 0.8, std::make_shared<Functions::Sigmoid>(1), true));

    model.Fit(samples, labels, {10000, 0.00001});

    std::cout << model.GetQuadraticMeans().size() << std::endl;

    for(int i = 0; i < samples.size() && i < labels.size(); i++)
    {
        auto prediction = model.Predict(samples[i]);
        if(labels[i][0] == 0)
            REQUIRE(prediction[0] < 0.5);
        else
            REQUIRE(prediction[0] > 0.5);
    }
}

TEST_CASE("4.14 example Recursive")
{
    Models::Model::Samples samples = {{-0.87, 0.7}, {-0.62, -0.78}, {0.73, 1.09}, {0.32, -0.2}, {0.18, -1.07}, {-0.45, -0.51}, {0.28, 0.89}, {1.67, 0.75}, {-0.21, 0.95}, {1.48, 0.01}, {1.75, 1.07}, {1.64, 1.78}, {0.76, -1.28}, {-0.56, 1.17}, {1.73, 1.59}, {1.1, -0.7}, {1.67, 0.62}, {0.17, -0.62}, {0.64, 1.71}, {-1.73, -0.71}, {0.17, -0.48}, {1.82, 0.92}, {-1.21, 0.5}, {1.29, 0.1}, {-1.78, -0.2}, {1.42, 0.64}, {-0.21, 1.21}, {-0.06, 1.39}, {0.03, -1.92}, {1.15, 0.6}, {-0.75, 0.95}, {1.51, 0.85}, {1.5, 0.43}, {1.28, -0.5}, {1.1, 0.29}, {-1.48, -0.65}, {1.18, -0.98}, {-1.53, 0.62}, {-0.67, -0.32}, {0.89, -0.37}, {1.54, 0.2}, {0.4, 1.53}, {-0.62, 0.5}, {1.84, 1.73}, {-0.04, -0.35}, {-0.5, 0.79}, {-0.31, 1.51}, {1.7, 0.82}, {1.29, 0.34}, {0.5, -1.04}, {1.62, 0.81}, {1.76, 1.67}, {-0.35, -1.0}, {1.03, -0.53}, {-0.35, -0.64}, {1.31, 0.35}, {0.68, -1.68}, {-0.98, 0.28}, {-0.15, -0.17}, {-0.01, 0.92}, {0.46, -1.68}, {1.0, 0.59}, {0.51, -0.46}, {-0.15, -0.68}, {1.73, 0.17}, {1.62, 0.35}, {0.96, -1.06}, {0.06, -1.68}, {-1.48, -1.75}, {0.18, -1.39}, {1.12, 0.2}, {-1.23, -1.32}, {-0.26, -0.39}, {1.82, 1.48}, {-0.64, -0.56}, {-1.37, -1.46}, {1.43, 0.21}, {-0.14, -1.6}, {0.9, 1.46}, {0.87, 0.18}, {-1.1, -1.62}, {-0.43, -0.29}, {-0.53, -0.12}, {0.12, 1.14}, {0.18, -0.29}, {1.42, 0.56}, {-0.82, -0.1}, {0.89, -0.71}, {1.12, 1.62}, {-1.51, -0.06}, {-1.37, -0.93}, {0.87, 0.4}, {-1.54, 0.29}, {0.57, -1.9}, {-0.04, -0.71}, {0.5, -1.46}, {0.32, -0.39}, {-0.96, 1.01}, {1.14, 1.32}, {0.6, 0.48}, {-1.5, -1.31}, {0.03, -0.85}, {1.67, 1.26}, {0.34, -0.68}, {1.85, 1.17}, {0.93, 1.78}, {1.32, 0.37}, {0.43, 0.32}, {-1.18, 0.57}, {-1.75, -1.67}, {1.71, 1.89}, {0.2, -1.25}, {-1.21, 0.92}, {1.76, 1.75}, {-1.75, -1.03}, {-0.26, -1.23}, {0.95, -1.57}, {-0.18, -1.1}, {-0.17, -0.5}, {-0.89, 0.56}, {-0.43, 0.78}, {1.79, 1.4}, {0.4, 1.26}, {0.76, 0.32}, {1.7, -0.03}, {0.68, -0.34}, {1.31, 0.89}, {-0.32, -0.29}, {0.76, -0.9}, {1.9, 1.82}, {1.54, 1.03}, {-0.07, 0.64}, {1.85, 0.56}, {0.76, 0.53}, {-1.65, 0.06}, {1.04, -1.29}, {-0.39, 0.64}, {1.14, 0.42}, {-1.35, 0.1}, {0.06, 1.62}, {-1.26, -1.78}, {-1.39, -0.43}, {-0.87, -1.84}, {0.65, -0.65}, {1.0, 0.43}, {0.64, 0.32}, {0.75, 1.85}, {0.57, 0.21}, {0.14, 0.29}, {1.09, 0.68}};
    Models::Model::Labels labels = {{0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {1.0, 0.0, 0.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {0.0, 0.0, 1.0}, {1.0, 0.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 0.0, 1.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}, {0.0, 1.0, 0.0}};

    Quark::Models::RecursiveFeedForwardModel model {};
    model.AddLayer(std::make_unique<Quark::Layers::GradientLayer>(3, 2, 0.01, std::make_shared<Functions::Sigmoid>(1), true));
    model.AddLayer(std::make_unique<Quark::Layers::GradientLayer>(3, 2, 0.01, std::make_shared<Functions::Sigmoid>(1), true));

    model.Fit(samples, labels, {10000, 0.00001});

    std::cout << model.GetQuadraticMeans().size() << std::endl;

    double total = 0;
    double ok = 0;

    for(int i = 0; i < samples.size() && i < labels.size(); i++)
    {
        auto prediction = model.Predict(samples[i]);
        for(int j = 0; j < prediction.size() &&  j < labels[i].size(); j++)
        {
            total++;
            if(labels[i][j] == 0)
                if(prediction[j] < 0.5)
                    ok++;
                else
                if(prediction[j] > 0.5)
                    ok++;
        }
    }

    std::cout << ok / total << std::endl;

}